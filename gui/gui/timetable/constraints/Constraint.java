/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Constraint.java
 *
 * Created on Feb 28, 2010, 6:23:18 PM
 */
package gui.timetable.constraints;

import business.timetable.constraints.Constraints;
import com.timetable.BasicException;
import com.timetable.gui.JMessageDialog;
import com.timetable.gui.MessageInf;
import gui.timetable.AppPanel;
import gui.timetable.AppView;
import java.awt.BorderLayout;
import java.awt.Cursor;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Usman Aftab (08-0964)
 */
public abstract class Constraint extends JPanel implements AppPanel, Editor {

    private AppView appView;
    private ConstraintView view;
    private Constraints<? extends business.timetable.constraints.Constraint> constraints;
    private boolean hardConstratingB;
    private boolean dirty;
    private int selectedIndex;
    private ListSelectionListener valueChangeListener;

    /** Creates new form Constraint */
    public Constraint(String name) {
        initComponents();

        setName(name + " Constraint");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        constraintList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        applyCheckBox = new javax.swing.JCheckBox();
        hardConstCheckBox = new javax.swing.JCheckBox();
        nameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        IDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        containerPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        newConstraintButton = new javax.swing.JButton();

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        constraintList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(constraintList);

        applyCheckBox.setText("Apply");
        applyCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyCheckBoxActionPerformed(evt);
            }
        });

        hardConstCheckBox.setText("Hard Constraint");
        hardConstCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardConstCheckBoxActionPerformed(evt);
            }
        });

        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyTyped(evt);
            }
        });

        jLabel1.setText("Name*");

        IDTextField.setEnabled(false);

        jLabel2.setText("ID*");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(hardConstCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addGap(63, 63, 63))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(11, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hardConstCheckBox)
                    .addComponent(applyCheckBox)
                    .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        containerPanel.setLayout(new java.awt.BorderLayout());

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        newConstraintButton.setText("New Constraint");
        newConstraintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newConstraintButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(331, 331, 331)
                        .addComponent(newConstraintButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(containerPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(newConstraintButton))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void init(AppView appView) {
        this.appView = appView;


        view = getConstraintView();
        view.init(appView);
        containerPanel.add(view, BorderLayout.CENTER);

        valueChangeListener = new javax.swing.event.ListSelectionListener() {

            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                constraintListValueChanged(evt);
            }
        };
        constraintList.addListSelectionListener(valueChangeListener);

        try {
            constraints = getConstraints();
            setConstraintList(constraints);
            if (constraints.size() == 0) {
                enableComponent(false);
            } else {
                constraintList.setSelectedIndex(0);
            }
        } catch (BasicException ex) {
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex));
        }
        setDirty(false);
    }

    private void addConstraint(int index, business.timetable.constraints.Constraint constraint) {
        DefaultListModel listModel = (DefaultListModel) constraintList.getModel();
        if (listModel == null) {
            listModel = new DefaultListModel();
            constraintList.setModel(listModel);
        }

        listModel.add(index, constraint);
        constraintList.setSelectedIndex(index);
    }

    private void changeSelection(business.timetable.constraints.Constraint constraint, int newIndex) {
        selectedIndex = newIndex;
        IDTextField.setText(String.valueOf(constraint.getID()));
        nameTextField.setText(constraint.getName());
        hardConstCheckBox.setSelected(constraint.isHardConstraint());
        applyCheckBox.setSelected(constraint.isApply());
        view.changeSelection(constraint);
    }

    private void constraintListValueChanged(javax.swing.event.ListSelectionEvent evt) {
        business.timetable.constraints.Constraint constraint =
                (business.timetable.constraints.Constraint) constraintList.getSelectedValue();
        int index = constraintList.getSelectedIndex();
        if (!isDirty()) {
            changeSelection(constraint, index);
            return;
        }

        business.timetable.constraints.Constraint oldConstraint =
                (business.timetable.constraints.Constraint) constraintList.getModel().getElementAt(selectedIndex);

        int result = JOptionPane.showConfirmDialog(this, "Do you want to save the changes you have made?",
                "Save changes confirmation.", JOptionPane.YES_NO_CANCEL_OPTION);

        if (result == 0) {
            if (save(oldConstraint)) {
                changeSelection(constraint, index);
            } else {
                revertSelection();
            }
            return;
        }

        if (result == 1) {
            if (oldConstraint.getID() == -1) {
                removeConstraint(0);
            }
            changeSelection(constraint, index);
            setDirty(false);
            return;
        }

        revertSelection();
    }

    protected abstract business.timetable.constraints.Constraint createNewConstraint();

    private void enableComponent(boolean b) {
        nameTextField.setEnabled(b);
        applyCheckBox.setEnabled(b);
        if (hardConstratingB) {
            hardConstCheckBox.setEnabled(b);
        }
        view.enableComponents(b);
    }

    public AppView getAppView() {
        return appView;
    }

    protected abstract Constraints<? extends business.timetable.constraints.Constraint> getConstraints() throws BasicException;

    protected abstract ConstraintView getConstraintView();

    public ConstraintView getView() {
        return view;
    }

    public boolean isDirty() {
        return dirty;
    }

    private boolean save(business.timetable.constraints.Constraint constraint) {
        if (constraint == null) {
            JOptionPane.showMessageDialog(this, "No constraint selected. \nPlease selected a constraint from the list first.");
            return false;
        }

        boolean result = true;
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

        constraint.setName(nameTextField.getText());
        constraint.setApply(applyCheckBox.isSelected());
        constraint.setHardConstraint(hardConstCheckBox.isSelected());

        try {
            getAppView().getSession().beginTransaction();
            int ID = saveConstraint(constraint);
            constraint.setID(ID);
            IDTextField.setText(String.valueOf(ID));
            setDirty(false);
            getAppView().getSession().endTransaction();
        } catch (BasicException ex) {
            try {
                getAppView().getSession().rollBack();
            } catch (BasicException ex1) {
                JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex1));
            }
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex));
            result = false;
        } finally {
            setCursor(Cursor.getDefaultCursor());
        }

        return result;
    }

    protected abstract int saveConstraint(business.timetable.constraints.Constraint constraint) throws BasicException;

    private void setConstraintList(Constraints<? extends business.timetable.constraints.Constraint> constraints) {
        DefaultListModel listModel = new DefaultListModel();
        for (business.timetable.constraints.Constraint constraint : constraints) {
            listModel.addElement(constraint);
        }
        constraintList.setModel(listModel);
    }

    public void setDirty(boolean dirty) {
        this.dirty = dirty;

        newConstraintButton.setEnabled(!this.dirty);
        saveButton.setEnabled(this.dirty);
    }

    protected void setHardConstCheckBox(boolean b) {
        hardConstCheckBox.setEnabled(b);
        hardConstratingB = b;
    }

    private void removeConstraint(int index) {
        constraintList.removeListSelectionListener(valueChangeListener);
        DefaultListModel listModel = (DefaultListModel) constraintList.getModel();
        listModel.remove(index);
        constraintList.addListSelectionListener(valueChangeListener);
    }

    private void revertSelection() {
        constraintList.removeListSelectionListener(valueChangeListener);
        constraintList.setSelectedIndex(selectedIndex);
        constraintList.addListSelectionListener(valueChangeListener);
    }

    private void newConstraintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newConstraintButtonActionPerformed
        business.timetable.constraints.Constraint constraint = createNewConstraint();
        addConstraint(0, constraint);
        changeSelection(constraint, 0);
        setDirty(true);
        enableComponent(true);
    }//GEN-LAST:event_newConstraintButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        save((business.timetable.constraints.Constraint) constraintList.getSelectedValue());
    }//GEN-LAST:event_saveButtonActionPerformed

    private void hardConstCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardConstCheckBoxActionPerformed
        setDirty(true);
    }//GEN-LAST:event_hardConstCheckBoxActionPerformed

    private void applyCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyCheckBoxActionPerformed
        setDirty(true);
    }//GEN-LAST:event_applyCheckBoxActionPerformed

    private void nameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyTyped
        setDirty(true);
    }//GEN-LAST:event_nameTextFieldKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDTextField;
    private javax.swing.JCheckBox applyCheckBox;
    private javax.swing.JList constraintList;
    private javax.swing.JPanel containerPanel;
    private javax.swing.JCheckBox hardConstCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton newConstraintButton;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
