/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EntitySelector.java
 *
 * Created on Mar 9, 2010, 11:05:47 PM
 */
package gui.timetable.common;

import business.timetable.Entity;
import business.timetable.EntityHashMap;
import business.timetable.EntityObject;
import business.timetable.classrooms.ClassRooms;
import business.timetable.courses.Courses;
import business.timetable.department.Departments;
import business.timetable.semester.Semester;
import business.timetable.students.Students;
import business.timetable.teachers.Teachers;
import business.timetable.timeslots.TimeSlots;
import com.timetable.BasicException;
import com.timetable.gui.JMessageDialog;
import com.timetable.gui.MessageInf;
import gui.timetable.AppPanel;
import gui.timetable.AppView;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import org.jdesktop.beansbinding.AutoBinding.UpdateStrategy;
import org.jdesktop.beansbinding.BeanProperty;
import org.jdesktop.swingbinding.JTableBinding;
import org.jdesktop.swingbinding.SwingBindings;

/**
 *
 * @author Usman Aftab (08-0964)
 */
public class EntitySelector extends JPanel implements AppPanel {

    private AppView appView;
    private Entity entity;
    private EntityHashMap entityObjects;
    private String property1Name;
    private String property2Name;
    private List<? extends EntityObject> list;
    private EntityObject currEntityObject;

    /** Creates new form CourseSelector */
    public EntitySelector() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        optionDialog = new javax.swing.JDialog();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        entityFilter = new gui.timetable.common.EntityFilter();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        optionDialog.setAlwaysOnTop(true);
        optionDialog.setLocationByPlatform(true);
        optionDialog.setMinimumSize(new java.awt.Dimension(500, 500));

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "ID", "Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.getColumnModel().getColumn(0).setHeaderValue("ID");
        table.getColumnModel().getColumn(1).setHeaderValue("Name");

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout optionDialogLayout = new javax.swing.GroupLayout(optionDialog.getContentPane());
        optionDialog.getContentPane().setLayout(optionDialogLayout);
        optionDialogLayout.setHorizontalGroup(
            optionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionDialogLayout.createSequentialGroup()
                .addContainerGap(272, Short.MAX_VALUE)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(entityFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        optionDialogLayout.setVerticalGroup(
            optionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, optionDialogLayout.createSequentialGroup()
                .addComponent(entityFilter, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 109, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(optionDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        nameLabel.setText("<Name>");

        nameTextField.setEnabled(false);

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(browseButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(resetButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel)
                    .addComponent(browseButton)
                    .addComponent(resetButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void init(AppView appView) {
        this.appView = appView;

        property1Name = "ID";
        property2Name = "name";

        entityFilter.init(appView);
        entityFilter.addFilterChangedListerner(new FilterChangedListener() {

            public void filterDepartmentChanged(FilterChangedEvent evt) {
                entityFilterDepartmentChanged(evt);
            }

            public void filterSemesterChanged(FilterChangedEvent evt) {
                entityFilterSemesterChanged(evt);
            }
        });

        for (JCheckBox checkBox : entityFilter.getCheckBoxs()) {
            checkBox.setSelected(true);
        }
    }

    @Override
    public AppView getAppView() {
        return appView;
    }

    public EntityObject getSelectedEntityObject() {
        return currEntityObject;
    }

    public void setSelectedEntityObject(EntityObject entityObject) {
        currEntityObject = entityObject;
        if (entityObject != null) {
            nameTextField.setText(entityObject.toString());
        } else {
            nameTextField.setText("");
        }

        fireEntitySelectionChangedEvent(currEntityObject);
    }

    public String getProperty1Name() {
        return property1Name;
    }

    public void setProperty1Name(String property1Name) {
        this.property1Name = property1Name;
    }

    public String getProperty2Name() {
        return property2Name;
    }

    public void setProperty2Name(String property2Name) {
        this.property2Name = property2Name;
    }

    public void setNameLabel(String name) {
        nameLabel.setText(name);
    }

    public void setEntity(Entity entity) throws BasicException {
        this.entity = entity;
        String name = entity.getDisplayName();
        nameLabel.setText(name);
        String displayName = entity.getDisplayName() + " Selector";
        optionDialog.setTitle(displayName);
        table.setName(displayName);
        setList();
    }

    public void enableComponent(boolean b) {
        browseButton.setEnabled(b);
        resetButton.setEnabled(b);
    }

    private void entityFilterDepartmentChanged(FilterChangedEvent evt) {
        setList(entityObjects.findBy(evt.getSemester(), evt.getDepartments()).getAllValues());
    }

    private void entityFilterSemesterChanged(FilterChangedEvent evt) {
        try {
            setList();
        } catch (BasicException ex) {
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex));
        }
    }

    private void setList() throws BasicException {
        Departments departments = Departments.getData(appView.getSession());
        Semester semester = entityFilter.getSemester();
        TimeSlots timeSlots = TimeSlots.getData(appView.getSession(), semester);
        Courses courses = Courses.getData(appView.getSession(), departments, semester);
        switch (entity) {
            case ClassRoom:
                entityObjects = ClassRooms.getData(appView.getSession(), departments, semester);
                break;
            case Course:
                entityObjects = courses;
                break;
            case Teacher:
                entityObjects = Teachers.getData(appView.getSession(), departments, semester, courses, timeSlots);
                break;
            case TimeSlot:
                entityObjects = timeSlots;
                break;
            case Student:
                entityObjects = Students.getData(appView.getSession(), departments, semester, courses);
            default:
                throw new BasicException("Entity Selector not supported.");
        }
        Departments selectedDepartments = entityFilter.getDepartments();
        setList(entityObjects.findBy(semester, selectedDepartments).getAllValues());
    }

    public void setList(List<? extends EntityObject> list) {
        this.list = list;
        JTableBinding binding = SwingBindings.createJTableBinding(UpdateStrategy.READ, list, table);

        BeanProperty IDP = BeanProperty.create(property1Name);
        BeanProperty nameP = BeanProperty.create(property2Name);

        JTableBinding.ColumnBinding cb = binding.addColumnBinding(IDP);
        cb.setColumnName(property1Name);
        cb.setEditable(false);

        cb = binding.addColumnBinding(nameP);
        cb.setColumnName(entity.getDisplayName());
        cb.setEditable(false);

        binding.bind();
    }

    private EntityObject getSelectedItem() {
        int row = table.getSelectedRow();
        if (row != -1) {
            return list.get(row);
        }
        return null;
    }

    public void addEntitySelectorListerner(EntitySelectorListener l) {
        listenerList.add(EntitySelectorListener.class, l);
    }

    private void fireEntitySelectionChangedEvent(EntityObject entityObject) {
        SelectionChangedEvent evt = new SelectionChangedEvent(entityObject);

        Object[] listeners = listenerList.getListenerList();

        for (int i = 0; i < listeners.length; i += 2) {
            if (listeners[i] == EntitySelectorListener.class) {
                ((EntitySelectorListener) listeners[i + 1]).selectionChanged(evt);
            }
        }
    }

    private void EntitySelectionChanged() {
        optionDialog.setVisible(false);
        EntityObject selectedItem = getSelectedItem();
        setSelectedEntityObject(selectedItem);
    }
    
    public void displayEntityFilter(boolean b){
            entityFilter.setVisible(b);
    }

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        optionDialog.setVisible(true);
    }//GEN-LAST:event_browseButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        optionDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        EntitySelectionChanged();
    }//GEN-LAST:event_okButtonActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (evt.getClickCount() == 2) {
            EntitySelectionChanged();
        }
    }//GEN-LAST:event_tableMouseClicked

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        setSelectedEntityObject(null);
    }//GEN-LAST:event_resetButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private gui.timetable.common.EntityFilter entityFilter;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JDialog optionDialog;
    private javax.swing.JButton resetButton;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
