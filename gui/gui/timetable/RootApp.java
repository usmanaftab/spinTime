/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrincipalApp.java
 *
 * Created on Feb 27, 2010, 11:27:21 PM
 */
package gui.timetable;

import gui.timetable.customize.CustomizeTT;
import com.timetable.BasicException;
import com.timetable.config.Config;
import com.timetable.gui.JMessageDialog;
import com.timetable.gui.MessageInf;
import dal.timetable.db.Session;
import gui.timetable.constraints.enclosure.EnclosureConstraint;
import gui.timetable.constraints.gap.GapConstraint;
import gui.timetable.constraints.general.GeneralConstraint;
import gui.timetable.constraints.limit.LimitConstraint;
import gui.timetable.constraints.specific.SpecificConstraint;
import java.awt.CardLayout;
import java.util.HashMap;
import javax.swing.JPanel;

/**
 *
 * @author Usman Aftab (08-0964)
 */
public class RootApp extends JPanel implements AppView {

    private Session session;
    private JPanel curPanel;
    private HashMap<String, AppPanel> createdPanels;

    /** Creates new form PrincipalApp */
    public RootApp() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        containerPanel = new javax.swing.JPanel();
        menuPanel = new gui.timetable.MenuPanel();
        jSeparator1 = new javax.swing.JSeparator();

        title.setFont(new java.awt.Font("SansSerif", 1, 18));
        title.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        title.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, java.awt.Color.darkGray), javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10)));

        containerPanel.setLayout(new java.awt.CardLayout());

        menuPanel.setBorder(null);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE))
                    .addComponent(menuPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void init() {
        try {
            session = new Session();

            curPanel = null;
            createdPanels = new HashMap<String, AppPanel>();
            menuPanel.init(this);
            String name = Config.getProperty("gui.timetable.GenerateTimeTable");
            setPanel(getPanel(name), name);
        } catch (BasicException ex) {
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex));
            System.exit(-1);
        }
    }

    public Session getSession() {
        return session;
    }

    public void setPanel(AppPanel panel, String name) {
        if (curPanel != null) {
            containerPanel.remove(curPanel);
        }

        curPanel = (JPanel) panel;
        title.setText(curPanel.getName());
        containerPanel.add(curPanel, name);
        curPanel.setVisible(true);

        CardLayout cl = (CardLayout) (containerPanel.getLayout());
        cl.show(containerPanel, name);
    }

    public AppPanel getPanel(String name) {
        AppPanel panel = createdPanels.get(name);
        try {
            if (panel != null) {
                return panel;
            }

            if (name.equals(Config.getProperty("gui.timetable.GenerateTimeTable"))) {
                panel = new GenerateTT();
            } else if (name.equals(Config.getProperty("gui.timetable.SpecificConstraint"))) {
                panel = new SpecificConstraint();
            } else if (name.equals(Config.getProperty("gui.timetable.GapConstraint"))) {
                panel = new GapConstraint();
            } else if (name.equals(Config.getProperty("gui.timetable.LimitConstraint"))) {
                panel = new LimitConstraint();
            } else if (name.equals(Config.getProperty("gui.timetable.GeneralConstraint"))) {
                panel = new GeneralConstraint();
            } else if (name.equals(Config.getProperty("gui.timetable.EnclosureConstraint"))) {
                panel = new EnclosureConstraint();
            } else if (name.equals(Config.getProperty("gui.timetable.Migration"))) {
                panel = new Migration();
            } else if (name.equals(Config.getProperty("gui.timetable.CustomizeTimeTable"))) {
                panel = new CustomizeTT();
            }

            panel.init(this);
            createdPanels.put(name, panel);

            
        } catch (Exception ex) {
            JMessageDialog.showMessage(this, new MessageInf(MessageInf.SGN_DANGER, ex.getMessage(), ex));
        }
        return panel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel containerPanel;
    private javax.swing.JSeparator jSeparator1;
    private gui.timetable.MenuPanel menuPanel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
